// Code generated by MockGen. DO NOT EDIT.
// Source: sequence.go
//
// Generated by this command:
//
//	mockgen -source=sequence.go -destination=./mock/sequence_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSequence is a mock of Sequence interface.
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
	isgomock struct{}
}

// MockSequenceMockRecorder is the mock recorder for MockSequence.
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance.
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// NextID mocks base method.
func (m *MockSequence) NextID(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextID", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextID indicates an expected call of NextID.
func (mr *MockSequenceMockRecorder) NextID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*MockSequence)(nil).NextID), ctx)
}
