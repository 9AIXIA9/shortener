// Code generated by MockGen. DO NOT EDIT.
// Source: shortUrlMap.go
//
// Generated by this command:
//
//	mockgen -source=shortUrlMap.go -destination=./mock/shortUrlMap_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	gomock "go.uber.org/mock/gomock"
	reflect "reflect"
	"shortener/internal/model"
)

// MockShortUrlMap is a mock of ShortUrlMap interface.
type MockShortUrlMap struct {
	ctrl     *gomock.Controller
	recorder *MockShortUrlMapMockRecorder
	isgomock struct{}
}

// MockShortUrlMapMockRecorder is the mock recorder for MockShortUrlMap.
type MockShortUrlMapMockRecorder struct {
	mock *MockShortUrlMap
}

// NewMockShortUrlMap creates a new mock instance.
func NewMockShortUrlMap(ctrl *gomock.Controller) *MockShortUrlMap {
	mock := &MockShortUrlMap{ctrl: ctrl}
	mock.recorder = &MockShortUrlMapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortUrlMap) EXPECT() *MockShortUrlMapMockRecorder {
	return m.recorder
}

// FindOneByMd5 mocks base method.
func (m *MockShortUrlMap) FindOneByMd5(ctx context.Context, md5 string) (*model.ShortUrlMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByMd5", ctx, md5)
	ret0, _ := ret[0].(*model.ShortUrlMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByMd5 indicates an expected call of FindOneByMd5.
func (mr *MockShortUrlMapMockRecorder) FindOneByMd5(ctx, md5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByMd5", reflect.TypeOf((*MockShortUrlMap)(nil).FindOneByMd5), ctx, md5)
}

// FindOneByShortUrl mocks base method.
func (m *MockShortUrlMap) FindOneByShortUrl(ctx context.Context, shortUrl string) (*model.ShortUrlMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByShortUrl", ctx, shortUrl)
	ret0, _ := ret[0].(*model.ShortUrlMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByShortUrl indicates an expected call of FindOneByShortUrl.
func (mr *MockShortUrlMapMockRecorder) FindOneByShortUrl(ctx, shortUrl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByShortUrl", reflect.TypeOf((*MockShortUrlMap)(nil).FindOneByShortUrl), ctx, shortUrl)
}

// Insert mocks base method.
func (m *MockShortUrlMap) Insert(ctx context.Context, data *model.ShortUrlMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockShortUrlMapMockRecorder) Insert(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockShortUrlMap)(nil).Insert), ctx, data)
}
