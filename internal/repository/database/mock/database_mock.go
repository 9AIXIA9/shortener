// Code generated by MockGen. DO NOT EDIT.
// Source: mysql.go
//
// Generated by this command:
//
//	mockgen -source=mysql.go -destination=./mock/database_mock.go -package=database
//

// Package database is a generated GoMock package.
package database

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSequenceDatabase is a mock of SequenceDatabase interface.
type MockSequenceDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceDatabaseMockRecorder
	isgomock struct{}
}

// MockSequenceDatabaseMockRecorder is the mock recorder for MockSequenceDatabase.
type MockSequenceDatabaseMockRecorder struct {
	mock *MockSequenceDatabase
}

// NewMockSequenceDatabase creates a new mock instance.
func NewMockSequenceDatabase(ctrl *gomock.Controller) *MockSequenceDatabase {
	mock := &MockSequenceDatabase{ctrl: ctrl}
	mock.recorder = &MockSequenceDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequenceDatabase) EXPECT() *MockSequenceDatabaseMockRecorder {
	return m.recorder
}

// GetBatchIDs mocks base method.
func (m *MockSequenceDatabase) GetBatchIDs(ctx context.Context, batch uint64) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchIDs", ctx, batch)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchIDs indicates an expected call of GetBatchIDs.
func (mr *MockSequenceDatabaseMockRecorder) GetBatchIDs(ctx, batch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchIDs", reflect.TypeOf((*MockSequenceDatabase)(nil).GetBatchIDs), ctx, batch)
}
