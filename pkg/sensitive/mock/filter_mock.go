// Code generated by MockGen. DO NOT EDIT.
// Source: filter.go
//
// Generated by this command:
//
//	mockgen -source=filter.go -destination=./mock/filter_mock.go -package=sensitive
//

// Package sensitive is a generated GoMock package.
package sensitive

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilter is a mock of Filter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
	isgomock struct{}
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// ContainsBadWord mocks base method.
func (m *MockFilter) ContainsBadWord(input string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsBadWord", input)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsBadWord indicates an expected call of ContainsBadWord.
func (mr *MockFilterMockRecorder) ContainsBadWord(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsBadWord", reflect.TypeOf((*MockFilter)(nil).ContainsBadWord), input)
}
