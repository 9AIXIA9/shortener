// Code generated by MockGen. DO NOT EDIT.
// Source: filter.go
//
// Generated by this command:
//
//	mockgen -source=filter.go -destination=./mock/filter_mock.go -package=filter
//

// Package filter is a generated GoMock package.
package filter

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilter is a mock of ShortUrlFilter interface.
type MockFilter struct {
	ctrl     *gomock.Controller
	recorder *MockFilterMockRecorder
	isgomock struct{}
}

// MockFilterMockRecorder is the mock recorder for MockFilter.
type MockFilterMockRecorder struct {
	mock *MockFilter
}

// NewMockFilter creates a new mock instance.
func NewMockFilter(ctrl *gomock.Controller) *MockFilter {
	mock := &MockFilter{ctrl: ctrl}
	mock.recorder = &MockFilterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilter) EXPECT() *MockFilterMockRecorder {
	return m.recorder
}

// AddCtx mocks base method.
func (m *MockFilter) AddCtx(ctx context.Context, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCtx", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCtx indicates an expected call of AddCtx.
func (mr *MockFilterMockRecorder) AddCtx(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCtx", reflect.TypeOf((*MockFilter)(nil).AddCtx), ctx, data)
}

// ExistsCtx mocks base method.
func (m *MockFilter) ExistsCtx(ctx context.Context, data []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsCtx", ctx, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsCtx indicates an expected call of ExistsCtx.
func (mr *MockFilterMockRecorder) ExistsCtx(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsCtx", reflect.TypeOf((*MockFilter)(nil).ExistsCtx), ctx, data)
}
