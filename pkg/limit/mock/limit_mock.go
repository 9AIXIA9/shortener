// Code generated by MockGen. DO NOT EDIT.
// Source: limit.go
//
// Generated by this command:
//
//	mockgen -source=limit.go -destination=./mock/limit_mock.go -package=limit
//

// Package limit is a generated GoMock package.
package limit

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockLimit is a mock of Limit interface.
type MockLimit struct {
	ctrl     *gomock.Controller
	recorder *MockLimitMockRecorder
	isgomock struct{}
}

// MockLimitMockRecorder is the mock recorder for MockLimit.
type MockLimitMockRecorder struct {
	mock *MockLimit
}

// NewMockLimit creates a new mock instance.
func NewMockLimit(ctrl *gomock.Controller) *MockLimit {
	mock := &MockLimit{ctrl: ctrl}
	mock.recorder = &MockLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLimit) EXPECT() *MockLimitMockRecorder {
	return m.recorder
}

// Allow mocks base method.
func (m *MockLimit) Allow() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allow indicates an expected call of Allow.
func (mr *MockLimitMockRecorder) Allow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockLimit)(nil).Allow))
}

// AllowCtx mocks base method.
func (m *MockLimit) AllowCtx(ctx context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowCtx", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowCtx indicates an expected call of AllowCtx.
func (mr *MockLimitMockRecorder) AllowCtx(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowCtx", reflect.TypeOf((*MockLimit)(nil).AllowCtx), ctx)
}

// AllowN mocks base method.
func (m *MockLimit) AllowN(now time.Time, n int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowN", now, n)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowN indicates an expected call of AllowN.
func (mr *MockLimitMockRecorder) AllowN(now, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowN", reflect.TypeOf((*MockLimit)(nil).AllowN), now, n)
}

// AllowNCtx mocks base method.
func (m *MockLimit) AllowNCtx(ctx context.Context, now time.Time, n int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowNCtx", ctx, now, n)
	ret0, _ := ret[0].(bool)
	return ret0
}

// AllowNCtx indicates an expected call of AllowNCtx.
func (mr *MockLimitMockRecorder) AllowNCtx(ctx, now, n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowNCtx", reflect.TypeOf((*MockLimit)(nil).AllowNCtx), ctx, now, n)
}
